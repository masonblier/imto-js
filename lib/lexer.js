// Generated by CoffeeScript 1.3.3
(function() {
  var Lexer, OPERATORS, WHITESPACE,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  WHITESPACE = [' ', '\t'];

  OPERATORS = ['=', '+', '-', '*', '/', '<', '>', '%', '&', '(', ')', '[', ']', '^', ':', '?', '.'];

  Lexer = function(str) {
    var LexerClass;
    LexerClass = (function() {
      var c, formatBlockSource, input, m, memos, next_token, replaceSpecials, special;

      c = 0;

      m = -1;

      input = '';

      special = [];

      memos = [];

      function LexerClass(str) {
        c = 0;
        input = str;
        replaceSpecials();
      }

      LexerClass.prototype.all = function() {
        var t, _results;
        _results = [];
        while (t = this.next()) {
          _results.push(t);
        }
        return _results;
      };

      LexerClass.prototype.next = function(i) {
        var o;
        if (i == null) {
          i = 1;
        }
        o = m + i;
        while (m < o) {
          if (!memos[m += 1]) {
            memos[m] = next_token();
          }
        }
        return memos[m];
      };

      LexerClass.prototype.back = function(i) {
        if (i == null) {
          i = 1;
        }
        m -= i;
        return memos[m];
      };

      LexerClass.prototype.peek = function(i) {
        var o;
        if (i == null) {
          i = 1;
        }
        o = m + i;
        while (m < o) {
          this.next();
        }
        m = o - i;
        return memos[o];
      };

      LexerClass.prototype.prev = function(i) {
        if (i == null) {
          i = 1;
        }
        return memos[m - i];
      };

      replaceSpecials = function() {
        var d, i, idx, imtch, indent, k, l, lines, marker, match, p, paramList, params, submatch, token, _i, _len, _results;
        lines = input.split('\n');
        indent = '';
        while ((!/\S/.test(lines[0])) && lines.length > 1) {
          lines.splice(0, 1);
        }
        if (imtch = /^\s+/.exec(lines[0] && (imtch != null))) {
          indent = imtch[0];
        }
        i = 0;
        l = -1;
        while (i <= lines.length) {
          while (i < lines.length && (lines[i].indexOf(indent === 0)) && /^\s/.test(lines[i].substr(indent.length))) {
            if (l === -1) {
              l = i;
            }
            i++;
          }
          if (l >= 0) {
            str = lines.splice(l, i - l).join('\n');
            idx = special.length;
            lines.splice(l, 0, "{" + idx + "}");
            special[idx] = {
              type: 'block',
              token: str,
              'source': formatBlockSource(str)
            };
            i = l;
            l = -1;
          }
          i++;
        }
        input = lines.join('\n');
        i = 0;
        d = 0;
        l = 0;
        while (i < input.length) {
          if (input[i] === '{') {
            if (d === 0) {
              l = i;
            }
            d += 1;
          } else if (input[i] === '}') {
            d -= 1;
            if (d === 0) {
              token = input.substr(l, i - l + 1);
              if (/^(\s*)\{([0-9])+\}(\s*)$/.test(token)) {
                i++;
                continue;
              } else if ((imtch = /^\{(\s*)\{([0-9])+\}(\s*)\}$/.exec(token)) && (imtch != null)) {
                marker = '{' + imtch[2] + '}';
                input = input.substr(0, l) + marker + input.substr(i + 1);
              } else {
                k = special.length;
                marker = "{" + k + "}";
                input = input.substr(0, l) + marker + input.substr(i + 1);
                special[k] = {
                  type: 'block',
                  'token': token,
                  'source': formatBlockSource(token)
                };
              }
              i = l + marker.length;
            }
            if (d <= -1) {
              throw 'parser stack index out of bounds';
            }
          }
          i += 1;
        }
        if (d > 0) {
          throw 'parser stack unbalanced';
        }
        _results = [];
        while ((match = /\(((?:[,\t ]*[a-zA-Z_][a-zA-Z0-9_]*)+[\t ]*)?\)[\t ]*[=-]>/.exec(input)) !== null) {
          i = special.length;
          input = input.replace(match[0], "{" + i + "}");
          paramList = [];
          submatch = /\((.*)\)/.exec(match[0]);
          params = /,/.test(submatch[1]) ? submatch[1].split(',') : [];
          for (_i = 0, _len = params.length; _i < _len; _i++) {
            p = params[_i];
            paramList.push(p.trim());
          }
          _results.push(special[i] = {
            type: 'function',
            'token': match[0],
            paramList: paramList
          });
        }
        return _results;
      };

      formatBlockSource = function(source) {
        var imtch, indent, line, lines, work;
        work = source;
        indent = '';
        if (work[0] === '{' && work[work.length - 1] === '}') {
          work = work.substr(1, work.length - 2);
        }
        lines = work.split('\n');
        while ((!/\S/.test(lines[0])) && lines.length > 1) {
          lines.splice(0, 1);
        }
        if ((imtch = /^\s+/.exec(lines[0])) && (imtch != null)) {
          indent = imtch[0];
        }
        work = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = lines.length; _i < _len; _i++) {
            line = lines[_i];
            _results.push(line.replace(indent, ''));
          }
          return _results;
        })()).join('\n');
        return work;
      };

      next_token = function() {
        var buffer, index, sym, token, value, x;
        if (c >= input.length) {
          return null;
        }
        x = input[c];
        c += 1;
        buffer = '';
        while (__indexOf.call(WHITESPACE, x) >= 0) {
          x = input[c];
          c += 1;
        }
        if (x === void 0) {
          return {
            type: 'none',
            token: ""
          };
        }
        if (x === '{') {
          while (true) {
            x = input[c];
            c++;
            if (!(c < input.length && x !== '}')) {
              break;
            }
            buffer += x;
          }
          index = parseInt(buffer);
          return special[index];
        }
        if (__indexOf.call(OPERATORS, x) >= 0) {
          while (true) {
            buffer += x;
            x = input[c];
            if (__indexOf.call(OPERATORS, x) < 0) {
              break;
            }
            c += 1;
            if (!(c < input.length)) {
              break;
            }
          }
          return {
            type: 'operator',
            token: buffer
          };
        }
        if (/([a-zA-Z_]|@|\.)/.test(x)) {
          token = '';
          while (true) {
            token += x;
            if (!(c < input.length)) {
              break;
            }
            x = input[c];
            if (!(x === '.' || /([a-zA-Z0-9_])/.test(x))) {
              break;
            }
            c++;
          }
          return {
            type: 'symbol',
            token: token
          };
        }
        if (/([0-9])/.test(x)) {
          value = '';
          while (true) {
            value += x;
            if (!(c < input.length && (x = input[c]))) {
              break;
            }
            if (!/([0-9]|\.)/.test(x)) {
              break;
            }
            c++;
          }
          return {
            type: 'literal',
            token: value,
            value: parseFloat(value)
          };
        }
        if (x === "'" || x === '"') {
          sym = x;
          value = '';
          while (true) {
            if (!(c < input.length)) {
              break;
            }
            x = input[c];
            c++;
            if (x === sym) {
              break;
            }
            value += x;
          }
          return {
            type: 'literal',
            token: sym + value + sym,
            value: value
          };
        }
        if (x === '\n') {
          return {
            type: 'linefeed',
            token: '\n'
          };
        }
        return {
          type: 'unknown'
        };
      };

      return LexerClass;

    })();
    return new LexerClass(str);
  };

  module.exports = Lexer;

}).call(this);
