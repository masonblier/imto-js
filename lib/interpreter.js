// Generated by CoffeeScript 1.3.3
(function() {
  var Context, Interpreter, Lexer, Parser, clc;

  clc = require('cli-color');

  Context = require('./context');

  Lexer = require('./lexer');

  Parser = require('./parser');

  Interpreter = (function() {

    function Interpreter() {
      this.context = new Context();
    }

    Interpreter.prototype.lex = function(code) {
      return (new Lexer(code)).cursor().all();
    };

    Interpreter.prototype.parse = function(code) {
      return new Parser((new Lexer(code)).cursor()).all();
    };

    Interpreter.prototype["eval"] = function(code) {
      return this.context.myvar = "1";
    };

    Interpreter.prototype.print = function(list, indent) {
      var head, node;
      if (indent == null) {
        indent = "";
      }
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          node = list[_i];
          head = "" + indent + "(" + (clc.green(node.type));
          if (node.type === "block") {
            _results.push("" + head + "\n" + (this.print(node.tree, indent + "  ")) + "\n" + indent + ")");
          } else if (node.type === "function") {
            _results.push("" + head + "\n" + (this.print([node.body], indent + "  ")) + "\n" + indent + ")");
          } else if (node.type === "assignment" || node.type === "property_assignment") {
            _results.push("" + head + " " + (clc.blue("" + node.symbol)) + "\n" + (this.print([node.value], indent + "  ")) + "\n" + indent + ")");
          } else if (node.type === "literal") {
            _results.push("" + head + " " + (clc.red(node.token)) + ")");
          } else {
            _results.push("" + head + " '" + node.token + "')");
          }
        }
        return _results;
      }).call(this)).join("\n");
    };

    return Interpreter;

  })();

  module.exports = Interpreter;

}).call(this);
