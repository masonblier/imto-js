// Generated by CoffeeScript 1.3.3
(function() {
  var Evaluator,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = Evaluator = (function() {

    function Evaluator(context) {
      this.context = context;
      this.number = __bind(this.number, this);

      this.operator = __bind(this.operator, this);

      this.block = __bind(this.block, this);

      this.execute = __bind(this.execute, this);

      this.assignment = __bind(this.assignment, this);

      this.exec = __bind(this.exec, this);

      this.run = __bind(this.run, this);

    }

    Evaluator.prototype.run = function(parser) {
      var last;
      last = void 0;
      while (parser.peek() != null) {
        if (parser.peek().type === "comment") {
          parser.next();
        }
        last = this.exec(parser.next());
      }
      return last;
    };

    Evaluator.prototype.exec = function(node) {
      return this.assignment(node) || this.execute(node) || this.block(node) || this.operator(node) || this.number(node);
    };

    Evaluator.prototype.assignment = function(node) {
      if (node.type === "assignment") {
        return this.context.set(node.symbol, this.exec(node.value));
      }
    };

    Evaluator.prototype.execute = function(node) {
      if (node.type === "execute") {
        return this.context.get(node.symbol);
      }
    };

    Evaluator.prototype.block = function(node) {
      if (node.type === "block") {
        return this.run(node.parse());
      }
    };

    Evaluator.prototype.operator = function(node) {
      if (node.type === "operator") {
        if (node.operator === "+") {
          return this.exec(node.left) + this.exec(node.right);
        }
      }
    };

    Evaluator.prototype.number = function(node) {
      if (node.type === "number") {
        return node.value;
      }
    };

    return Evaluator;

  })();

}).call(this);
